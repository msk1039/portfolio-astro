---
import { getCollection, type CollectionEntry, render } from 'astro:content'
import Layout from '@/layouts/Layout.astro'
import Container from '@/components/Container.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import { Badge } from '@/components/ui/badge'
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'

export async function getStaticPaths() {
  const projects = await getCollection('projects')
  return projects.map((project) => ({
    params: { id: project.id },
    props: { project },
  }))
}

interface Props {
  project: CollectionEntry<'projects'>
}

const { project } = Astro.props
const { data } = project
const { Content } = await render(project) // Changed from project.render() to render(project)
---

<Layout 
  title={project.data.name}
  description={project.data.description}
  image={project.data.image?.src}
>
  <Container class="px-8 md:px-12 py-12 max-w-7xl mx-auto">
    <section class="scroll-mt-4">
      <div class="flex flex-col md:flex-row justify-between items-start mb-8 gap-4" data-animate data-delay="0">
        <div>
          <p class="text-3xl md:text-4xl lg:text-5xl tracking-tighter font-medium text-black" data-animate data-delay="1">
            {project.data.name}
          </p>
          <p class="text-sm md:text-base text-zinc-500 mt-4" data-animate data-delay="2">
            {project.data.description}
          </p>
        </div>
      </div>
      
      <a 
        href="/projects"
        class="inline-flex items-center gap-2 mb-6 rounded-full px-4 border py-2 text-sm font-semibold transition-all bg-white text-zinc-500 h-10 border-zinc-300 hover:bg-black hover:text-white duration-300"
        data-animate data-delay="3"
      >
        <Icon name="lucide:arrow-left" class="size-4"/>
        <span>Back to Projects</span>
      </a>

      <div class="bg-white rounded-3xl border border-zinc-200 shadow-sm p-8 mb-10" data-animate data-delay="4">
        <article>
          <div class="flex flex-col gap-6 mb-8">
            {project.data.image && (
              <div class="overflow-hidden rounded-2xl border border-zinc-200" data-animate data-delay="5">
                <Image
                  src={project.data.image}
                  alt={project.data.name}
                  width={1200}
                  height={630}
                  class="w-full object-cover transition-all duration-300 hover:scale-105"
                />
              </div>
            )}

            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4" data-animate-group>
              {project.data.link && (
                <a 
                  href={project.data.link}
                  target="_blank"
                  rel="noopener noreferrer" 
                  class="rounded-full px-4 border py-2 text-sm font-semibold transition-all flex items-center gap-2 bg-white text-zinc-500 h-10 border-zinc-300 hover:bg-black hover:text-white duration-300 w-fit"
                  data-animate-item
                >
                  View Project
                  <Icon name="lucide:external-link" class="size-4" />
                </a>
              )}
              
              {project.data.tags && (
                <div class="flex flex-wrap gap-2" data-animate-item>
                  {project.data.tags.map((tag: string) => (
                    <Badge variant="secondary" className="rounded-full bg-zinc-100 text-zinc-800 hover:bg-zinc-200">
                      {tag}
                    </Badge>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div class="prose prose-zinc max-w-none prose-headings:font-medium prose-headings:tracking-tight prose-p:text-lg prose-p:leading-relaxed prose-p:text-black" data-animate data-delay="6">
            <Content />
          </div>
        </article>
      </div>
    </section>
  </Container>
</Layout>